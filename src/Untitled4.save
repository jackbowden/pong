    // create main window and prevent it from being resized
    // this is my init
    sf::RenderWindow App(sf::VideoMode(800,600,32), "Pong, by Jack Bowden", sf::Style::Close); //width by height

    // start main loop
    while(App.isOpen())
    {
        // process events
        sf::Event Event;
        while(App.pollEvent(Event))
        {
          // Exit
          // this is my shutdown

          //need to start looping to accept input here i suppose


          if(Event.type == sf::Event::Closed)
            App.close();
        }

        // clear screen and fill with black
        App.clear(sf::Color::Black);

        //!!!!

            // Define some constants
    const float pi = 3.14159f;
    const int gameWidth = 800;
    const int gameHeight = 600;
    sf::Vector2f paddleSize(25, 100);

    float ballRadius = 10.f;

        float gameBallRadius = 10.f;
        sf::CircleShape gameBall;
        gameBall.setRadius(gameBallRadius - 3);
        gameBall.setOrigin(gameBallRadius / 2, gameBallRadius / 2);
        gameBall.setPosition(gameWidth / 2, gameHeight / 2);
        //gameBall.setPointCount(50);
        gameBall.setFillColor(sf::Color::White);



                // Create the left paddle
        sf::RectangleShape leftPaddle;
        leftPaddle.setSize(paddleSize - sf::Vector2f(3, 3));
        leftPaddle.setOutlineThickness(3);
        leftPaddle.setOutlineColor(sf::Color::Black);
        leftPaddle.setFillColor(sf::Color(100, 100, 200));
        leftPaddle.setOrigin(paddleSize / 2.f);

        // Create the right paddle
        sf::RectangleShape rightPaddle;
        rightPaddle.setSize(paddleSize - sf::Vector2f(3, 3));
        rightPaddle.setOutlineThickness(3);
        rightPaddle.setOutlineColor(sf::Color::Black);
        rightPaddle.setFillColor(sf::Color(200, 100, 100));
        rightPaddle.setOrigin(paddleSize / 2.f);

        App.draw(leftPaddle);
            App.draw(rightPaddle);
            App.draw(gameBall);




        //!!!!!

        // display
        App.display();
    }
